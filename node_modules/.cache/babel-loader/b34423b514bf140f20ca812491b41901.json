{"ast":null,"code":"const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\nconst Base64 = {\n  btoa: input => {\n    let str = input;\n    let output = '';\n\n    for (let block = 0, charCode, i = 0, map = chars; str.charAt(i | 0) || (map = '=', i % 1); output += map.charAt(63 & block >> 8 - i % 1 * 8)) {\n      charCode = str.charCodeAt(i += 3 / 4);\n\n      if (charCode > 0xFF) {\n        throw new Error(\"'btoa' failed: The string to be encoded contains characters outside of the Latin1 range.\");\n      }\n\n      block = block << 8 | charCode;\n    }\n\n    return output;\n  },\n  atob: input => {\n    let str = input && input.replace(/=+$/, '');\n    let output = '';\n\n    if (str.length % 4 == 1) {\n      throw new Error(\"'atob' failed: The string to be decoded is not correctly encoded.\");\n    }\n\n    for (let bc = 0, bs = 0, buffer, i = 0; buffer = str.charAt(i++); ~buffer && (bs = bc % 4 ? bs * 64 + buffer : buffer, bc++ % 4) ? output += String.fromCharCode(255 & bs >> (-2 * bc & 6)) : 0) {\n      buffer = chars.indexOf(buffer);\n    }\n\n    return output;\n  }\n};\nexport default Base64;","map":{"version":3,"sources":["/Users/vijaysingh/ReactJS/nskart/src/helper/EncodeDecode.js"],"names":["chars","Base64","btoa","input","str","output","block","charCode","i","map","charAt","charCodeAt","Error","atob","replace","length","bc","bs","buffer","String","fromCharCode","indexOf"],"mappings":"AAAA,MAAMA,KAAK,GAAG,mEAAd;AACA,MAAMC,MAAM,GAAG;AACXC,EAAAA,IAAI,EAAGC,KAAD,IAAW;AACb,QAAIC,GAAG,GAAGD,KAAV;AACA,QAAIE,MAAM,GAAG,EAAb;;AAEA,SAAK,IAAIC,KAAK,GAAG,CAAZ,EAAeC,QAAf,EAAyBC,CAAC,GAAG,CAA7B,EAAgCC,GAAG,GAAGT,KAA3C,EACII,GAAG,CAACM,MAAJ,CAAWF,CAAC,GAAG,CAAf,MAAsBC,GAAG,GAAG,GAAN,EAAWD,CAAC,GAAG,CAArC,CADJ,EAEIH,MAAM,IAAII,GAAG,CAACC,MAAJ,CAAW,KAAKJ,KAAK,IAAI,IAAIE,CAAC,GAAG,CAAJ,GAAQ,CAArC,CAFd,EAEuD;AAEnDD,MAAAA,QAAQ,GAAGH,GAAG,CAACO,UAAJ,CAAeH,CAAC,IAAI,IAAI,CAAxB,CAAX;;AAEA,UAAID,QAAQ,GAAG,IAAf,EAAqB;AACjB,cAAM,IAAIK,KAAJ,CAAU,0FAAV,CAAN;AACH;;AAEDN,MAAAA,KAAK,GAAGA,KAAK,IAAI,CAAT,GAAaC,QAArB;AACH;;AAED,WAAOF,MAAP;AACH,GAnBU;AAqBXQ,EAAAA,IAAI,EAAGV,KAAD,IAAW;AACb,QAAIC,GAAG,GAAGD,KAAK,IAAIA,KAAK,CAACW,OAAN,CAAc,KAAd,EAAqB,EAArB,CAAnB;AACA,QAAIT,MAAM,GAAG,EAAb;;AAEA,QAAID,GAAG,CAACW,MAAJ,GAAa,CAAb,IAAkB,CAAtB,EAAyB;AACrB,YAAM,IAAIH,KAAJ,CAAU,mEAAV,CAAN;AACH;;AACD,SAAK,IAAII,EAAE,GAAG,CAAT,EAAYC,EAAE,GAAG,CAAjB,EAAoBC,MAApB,EAA4BV,CAAC,GAAG,CAArC,EACIU,MAAM,GAAGd,GAAG,CAACM,MAAJ,CAAWF,CAAC,EAAZ,CADb,EAGI,CAACU,MAAD,KAAYD,EAAE,GAAGD,EAAE,GAAG,CAAL,GAASC,EAAE,GAAG,EAAL,GAAUC,MAAnB,GAA4BA,MAAjC,EACRF,EAAE,KAAK,CADX,IACgBX,MAAM,IAAIc,MAAM,CAACC,YAAP,CAAoB,MAAMH,EAAE,KAAK,CAAC,CAAD,GAAKD,EAAL,GAAU,CAAf,CAA5B,CAD1B,GAC2E,CAJ/E,EAKE;AACEE,MAAAA,MAAM,GAAGlB,KAAK,CAACqB,OAAN,CAAcH,MAAd,CAAT;AACH;;AAED,WAAOb,MAAP;AACH;AAtCU,CAAf;AAyCA,eAAeJ,MAAf","sourcesContent":["const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\r\nconst Base64 = {\r\n    btoa: (input) => {\r\n        let str = input;\r\n        let output = '';\r\n\r\n        for (let block = 0, charCode, i = 0, map = chars;\r\n            str.charAt(i | 0) || (map = '=', i % 1);\r\n            output += map.charAt(63 & block >> 8 - i % 1 * 8)) {\r\n\r\n            charCode = str.charCodeAt(i += 3 / 4);\r\n\r\n            if (charCode > 0xFF) {\r\n                throw new Error(\"'btoa' failed: The string to be encoded contains characters outside of the Latin1 range.\");\r\n            }\r\n\r\n            block = block << 8 | charCode;\r\n        }\r\n\r\n        return output;\r\n    },\r\n\r\n    atob: (input) => {\r\n        let str = input && input.replace(/=+$/, '');\r\n        let output = '';\r\n\r\n        if (str.length % 4 == 1) {\r\n            throw new Error(\"'atob' failed: The string to be decoded is not correctly encoded.\");\r\n        }\r\n        for (let bc = 0, bs = 0, buffer, i = 0;\r\n            buffer = str.charAt(i++);\r\n\r\n            ~buffer && (bs = bc % 4 ? bs * 64 + buffer : buffer,\r\n                bc++ % 4) ? output += String.fromCharCode(255 & bs >> (-2 * bc & 6)) : 0\r\n        ) {\r\n            buffer = chars.indexOf(buffer);\r\n        }\r\n\r\n        return output;\r\n    }\r\n};\r\n\r\nexport default Base64;"]},"metadata":{},"sourceType":"module"}